clusters <-NULL
avg_dist <- NULL
for(i in 2:12)
{
clusters_kMeans <- kmeans(cluster_df,i)
clusters[i] <- as.data.frame(clusters_kMeans[["cluster"]])
cluster_df["cluster"] <- clusters[i]
avg_dist[i] <- sum(clusters_kMeans[["withinss"]]/clusters_kMeans[["size"]])
print(ggplot(cluster_df,aes(x=x,y=y,color=as.factor(cluster)))+geom_point()+labs(title = "Cluster Scatterplot"))
print(avg_dist[i])
}
plot(2:12,avg_dist[2:12],main="Average Euclidian Distance for k=2:12")
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car)
library(lattice)
library(ggplot2)
df<-read.csv("doggers.csv")
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:\Users\vasan\Predictive-Analytics\Week 03")
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("doggers.csv")
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
head(df)
summary(df)
class(df)
dim(df)
str(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
#Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
#Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab("Attendance in 1000s"),las=1)
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=temp,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
## Attendance by Opponent
ggplot(df,aes(x-attend/1000,y=oppnent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=oppnent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=opponent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1,trunc((2/3)*nrow(df))),rep(2,trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_attend<-predict(model.fit)
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1,trunc((2/3)*nrow(df))),rep(2,trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
train.model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_attend<-predict(train.model.fit)
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1,trunc((2/3)*nrow(df))),rep(2,trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
train.model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_Attend<-predict(train.model.fit)
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
train.model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_attend<-predict(train.model.fit)
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
summary(df)
class(df)
dim(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
## Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
## Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=temp,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=opponent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(Dodgers_df))), rep(2, trunc((1/3)*nrow(Dodgers_df))))
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train
train.model.fit
predict(train.model.fit)
predict(train.model.fit[0:2])
#predict(train.model.fit[0:2])
train.model.fit
predict(train.model.fit[0:2])
predict(train.model.fit)
#train.model.fit
predict(train.model.fit)[0]
#train.model.fit
predict(train.model.fit)[0:12]
#train.model.fit
c(rep(predict(train.model.fit)[0:12]))
#train.model.fit
c(rep(predict(train.model.fit)))
#train.model.fit
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend <- c(rep(predict(train.model.fit)))
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend <- predict(train.model.fit)
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-0
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-0
#df.Train$Predict_Attend <- predict(train.model.fit)
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
summary(df)
class(df)
dim(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
## Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
## Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=temp,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=opponent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-rep(0)
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-rep(0)
df.Train$Predict_Attend
#df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-rep(0)
df.Train$Predict_Attend<-predict(train.model.fit)
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-rep(0)
#df.Train$Predict_Attend <- predict(train.model.fit)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
cat("\n","Proportion of Test ", round(cor(df.Test$attend,df.Test$Predict_attend)^2, digits=3), "\n", sep="")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-rep(0)
#df.Train$Predict_Attend <- predict(train.model.fit)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
#cat("\n","Proportion of Test ", round(cor(df.Test$attend,df.Test$Predict_attend)^2, digits=3), "\n", sep="")
df.Training_Test <- rbind(df.Train, df.Test)
my.model.fit <- lm(my.model, data = df)  # use all available data
print(summary(my.model.fit))
## Attendance by Temperature
ggplot(df,aes(x=month,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
#create model
model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
summary(df)
class(df)
summary(df)
class(df)
dim(df)
str(df)
dim(df)
str(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
## Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
## Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=month,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By Month")+xlab("Month")+ylab("Attendance in 1000s")
#create model
model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
## Attendance by Temperature
ggplot(df,aes(x=month,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By Month")+xlab("Month")+ylab("Attendance in 1000s")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
df.Train
df.Test
df$Training_Test
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
#df.Training_Test <- rbind(df.Train, df.Test)
my.model.fit <- lm(my.model, data = df)  # use all available data
print(summary(my.model.fit))
library(ggplot2)
library(dplyr)
library(gapminder)
library(readxl)
library(tidyverse)
library(reshape2)
library(data.table)
library(plotly)
library(treemap)
library(plyr)
library(reshape2)
library(leaflet)
library(htmlwidgets)
library(akima)
library(ggplot2)
library(tibble)
#read csv input
setwd("C:/Users/vasan/DataVisualization/Week_9_10")
nba_df<-read.csv("ppg2008.csv")
costco_df<-read.csv("costcos-geocoded.csv")
nba_df$Name<-with(nba_df,reorder(Name,PTS))
#Heat Maps
nba_df.m<-melt(nba_df)
nba_df.m<-ddply(nba_df.m, .(variable),transform,rescale=rescale(value))
#Heat Maps
library(scales)
nba_df.m<-melt(nba_df)
nba_df.m<-ddply(nba_df.m, .(variable),transform,rescale=rescale(value))
base_size<-9
(p<-ggplot(nba_df.m,aes(variable,Name))+geom_tile(aes(fill=rescale),color='white')+scale_fill_gradient(low="white",high = "steelblue"))
p + theme_grey(base_size = base_size) + labs(x = "", y = "") + scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x=element_text(angle=90, hjust=0, vjust= 0.1)) +
theme(axis.text.y=element_text(hjust=0, vjust= 0.1)) +
ggtitle("2008 Basketball Player Statistics") +
xlab("Statistic") +
ylab("Basketball Player")
dev.copy(png,"./Heatmap Plot R.png")
dev.off()
# Spatial Charts
costco_df$faddr<-paste(costco_df$Address,costco_df$City,costco_df$State,costco_df$Zip.Code)
m<-leaflet()
m<-addTiles(m)
m<-addMarkers(m,lng=costco_df$Longitude,lat=costco_df$Latitude,popup = costco_df$faddr)
m
saveWidget(m,file="C:/Users/vasan/DataVisualization/Week_9_10/Spatial_Map.html")
# Contour
interp_df<-interp2xyz(interp(x=nba_df$FGA,y=nba_df$PTS,z=nba_df$FGP,duplicate = "mean"),data.frame = TRUE)
print(interp_df)
interp_df  %>%
filter(!is.na(z)) %>%
tbl_df() %>%
ggplot(aes(x = x, y = y, z = z, fill = z)) +
geom_tile() +
geom_contour(color = "white", alpha = 0.05) +
scale_fill_distiller(palette="Blues", na.value="white") +
theme_bw() +
xlab("PTS") +
ylab("FGA") +
ggtitle("Basketball FGP Based on FGA and PTS Contour Plot") +
guides(fill=guide_legend(title="FGP"))
dev.copy(png,"./Contour Plot.png")
dev.off()
