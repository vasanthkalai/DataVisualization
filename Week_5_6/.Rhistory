clusters[i] <- as.data.frame(clusters_kMeans[["cluster"]])
cluster_df["cluster"] <- clusters[i]
avg_dist[i] <- sum(clusters_kMeans[["withinss"]]/clusters_kMeans[["size"]])
print(ggplot(cluster_df,aes(x=x,y=y,color=as.factor(cluster)))+geom_point()+labs(title = "Cluster Scatterplot"))
print(avg_dist[i])
}
plot(2:12,avg_dist[2:12],main="Average Euclidian Distance for k=2:12")
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car)
library(lattice)
library(ggplot2)
df<-read.csv("doggers.csv")
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:\Users\vasan\Predictive-Analytics\Week 03")
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("doggers.csv")
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
head(df)
summary(df)
class(df)
dim(df)
str(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
#Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
#Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab("Attendance in 1000s"),las=1)
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=temp,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
## Attendance by Opponent
ggplot(df,aes(x-attend/1000,y=oppnent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=oppnent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=opponent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1,trunc((2/3)*nrow(df))),rep(2,trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_attend<-predict(model.fit)
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1,trunc((2/3)*nrow(df))),rep(2,trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
train.model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_attend<-predict(train.model.fit)
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1,trunc((2/3)*nrow(df))),rep(2,trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
train.model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_Attend<-predict(train.model.fit)
#create model
model<-{attend~month+day_of_week+day_night}
#Reseed
set.seed(1234)
training_test<-c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$training_test<-sample(training_test)
df$training_test<-factor(df$training_test,levels=c(1,2),labels=c("TRAIN","TEST"))
df.Train<-subset(df,training_test=="TRAIN")
df.Test<-subset(df,training_test=="TEST")
#Fit model to training set
train.model.fit<-lm(model,data=df.Train)
#Predict from training set
df.Train$Predict_attend<-predict(train.model.fit)
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
summary(df)
class(df)
dim(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
## Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
## Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=temp,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=opponent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(Dodgers_df))), rep(2, trunc((1/3)*nrow(Dodgers_df))))
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train
train.model.fit
predict(train.model.fit)
predict(train.model.fit[0:2])
#predict(train.model.fit[0:2])
train.model.fit
predict(train.model.fit[0:2])
predict(train.model.fit)
#train.model.fit
predict(train.model.fit)[0]
#train.model.fit
predict(train.model.fit)[0:12]
#train.model.fit
c(rep(predict(train.model.fit)[0:12]))
#train.model.fit
c(rep(predict(train.model.fit)))
#train.model.fit
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend <- c(rep(predict(train.model.fit)))
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend
df.Train$Predict_Attend<-NA
df.Train$Predict_Attend <- predict(train.model.fit)
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-0
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-0
#df.Train$Predict_Attend <- predict(train.model.fit)
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
summary(df)
class(df)
dim(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
## Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
## Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=temp,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
## Attendance by Opponent
ggplot(df,aes(x=attend/1000,y=opponent,color=day_night))+geom_point()+ggtitle("Attendance by Opponent")+
xlab("Attendance in 1000s")+ylab("Oppenent")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-rep(0)
df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-rep(0)
df.Train$Predict_Attend
#df.Train$Predict_Attend <- predict(train.model.fit)
df.Train$Predict_Attend<-rep(0)
df.Train$Predict_Attend<-predict(train.model.fit)
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-rep(0)
#df.Train$Predict_Attend <- predict(train.model.fit)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
cat("\n","Proportion of Test ", round(cor(df.Test$attend,df.Test$Predict_attend)^2, digits=3), "\n", sep="")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Predict from training set
df.Train$Predict_Attend<-rep(0)
#df.Train$Predict_Attend <- predict(train.model.fit)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
#cat("\n","Proportion of Test ", round(cor(df.Test$attend,df.Test$Predict_attend)^2, digits=3), "\n", sep="")
df.Training_Test <- rbind(df.Train, df.Test)
my.model.fit <- lm(my.model, data = df)  # use all available data
print(summary(my.model.fit))
## Attendance by Temperature
ggplot(df,aes(x=month,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By temperature")+xlab("Temp in F")+ylab("Attendance in 1000s")
#create model
model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
knitr::opts_chunk$set(echo = TRUE)
# Loading Libraries
library(car) #linear regression
library(lattice) # graphics
library(ggplot2) # graphics
#set directory
setwd("C:/Users/vasan/Predictive-Analytics/Week 03")
df<-read.csv("dodgers.csv")
head(df)
summary(df)
class(df)
summary(df)
class(df)
dim(df)
str(df)
dim(df)
str(df)
str(df)
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
df$day_of_week<-factor(df$day_of_week,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
df$month<-factor(df$month,levels=c("APR","MAY","JUN","AUG","SEP","OCT"))
## Day of weekdays
ggplot(df,aes(x=day_of_week,y=attend/1000))+geom_boxplot()+ggtitle("Weekdays Attendance")+
xlab("Days of week")+ylab("Attendances in 1000s")
## Day night attendance
ggplot(df,aes(x=day_night,y=attend/1000))+geom_boxplot()+ggtitle("Day night Attendance")+
xlab("Day night")+ylab("Attendance in 1000s")
## Month attendance
plot(df$month,df$attend/1000,main="Month Attendance",xlab="Month",ylab="Attendance in 1000s",las=1)
## Attendance by Temperature
ggplot(df,aes(x=month,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By Month")+xlab("Month")+ylab("Attendance in 1000s")
#create model
model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
## Attendance by Temperature
ggplot(df,aes(x=month,y=attend/1000,color=fireworks))+geom_point()+facet_wrap(day_night~skies)+
ggtitle("Attendance By Month")+xlab("Month")+ylab("Attendance in 1000s")
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
df.Training_Test <- rbind(df.Train, df.Test)
df.Train
df.Test
df$Training_Test
#create model
my.model <- {attend ~ month + day_of_week + day_night}
#Reseed
set.seed(1234)
training_test <- c(rep(1, trunc((2/3)*nrow(df))), rep(2, trunc((1/3)*nrow(df))))
#Sample
df$Training_Test <- sample(training_test)
df$Training_Test <- factor(df$Training_Test, levels = c(1, 2), labels = c("TRAIN", "TEST"))
df.Train <- subset(df, Training_Test == "TRAIN")
df.Test <- subset(df, Training_Test == "TEST")
#Fit model to training set
train.model.fit <- lm(my.model, data = df.Train)
#Evaluate the model
df.Test$Predict_Attend <- predict(train.model.fit, newdata = df.Test)
#df.Training_Test <- rbind(df.Train, df.Test)
my.model.fit <- lm(my.model, data = df)  # use all available data
print(summary(my.model.fit))
#importing libraries
libraries.package("ggplot2")
#importing libraries
package.libraries("ggplot2")
#importing libraries
library("ggplot2")
library("dplyr")
library("gapminder")
library("readxl")
library("tidyverse")
library("reshape2")
library("data.table")
library("plotly")
install.packages("Plotly")
y
plotly
yes
install.packages("Plotly")
Y
plotly
"plotly"
library("plotly")
install.packages("plotly")
library("plotly")
library("treemap")
install.packages("treemap")
install.packages("treemap")
library("treemap")
#Reading csv file
unemp_df<-read.csv("unemployement-rate-1948-2010.csv")
#Reading csv file
setwd("C:/Users/vasan/DataVisualization/Week_5_6")
unemp_df<-read.csv("unemployement-rate-1948-2010.csv")
head(unemp_df)
#Reading txt file
exp_df<-read.table("expenditure.txt",sep='\t',header=TRUE)
#Reading txt file
exp_df<-read.table("expenditures.txt",sep='\t',header=TRUE)
head(exp_df)
#Tree Map
exp_agg_df<-aggregate(unemp_df$Value,by=list(Year=unemp_df$Year),FUN=avg_dist)
#Tree Map
exp_agg_df<-aggregate(unemp_df$Value,by=list(Year=unemp_df$Year),FUN=sum)
group<-exp_agg_df$Year
value<-exp_agg_df$x
df<-data.frame(group,value)
treemap(df,index="group",vSize="value",type="index",title="Unemployment between 1984-2010",fontsize.title = 12)
dev.copy(png,"Tree_Map_R.png")
dev.off()
ggplot(df,aes(x=group,y=value))+geom_area(fill="green",alpha=0.4)+geom_line(color="red",size=2)+geom_point(size=3,color="green")+
theme_ipsum()+labs(x="Year",y="Dollars")+ggtitle("Expenditures by year")
ggplot(df,aes(x=group,y=value))
#importing libraries
library("ggplot2")
ggplot2(df,aes(x=group,y=value))+geom_area(fill="green",alpha=0.4)+geom_line(color="red",size=2)+geom_point(size=3,color="green")+
theme_ipsum()+labs(x="Year",y="Dollars")+ggtitle("Expenditures by year")
ggplot(df,aes(x=group,y=value))+geom_area(fill="green",alpha=0.4)+geom_line(color="red",size=2)+geom_point(size=3,color="green")+
theme_ipsum()+labs(x="Year",y="Dollars")+ggtitle("Expenditures by year")
ggplot(df,aes(x=group,y=value))+geom_area(fill="green",alpha=0.4)+geom_line(color="red",size=2)+geom_point(size=3,color="green")+
labs(x="Year",y="Dollars")+ggtitle("Expenditures by year")
dev.copy(png,"Area_Map_R.png")
dev.off()
#Stacked Area Chart
Values<-round(unemp_df$Value,0)
df1<-data.frame(Year=unemp_df$Year,Period=unemp_df$Period,Values=round(unemp_df$Value,0))
ggplot(df1,aes(x=Year,y=Values,fill=Period))+geom_area(colour="black",size=0.2,alpha=0.8)+ggtitle("Unemployment by Year")
dev.copy(png,"Stacked_Area_Map_R.png")
dev.off()
